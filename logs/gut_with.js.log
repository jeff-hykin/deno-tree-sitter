should be "function" : function
should be "10" : {
  "": "10",
  type: "number",
  typeId: 109,
  fieldNames: [],
  startPosition: { row: 2, column: 16 },
  startIndex: 44,
  endPosition: { row: 2, column: 18 },
  endIndex: 46,
  indent: "        ",
  hasChildren: false,
  children: []
}
should be "=" : {
  "": "=",
  type: "=",
  typeId: 39,
  fieldNames: [],
  startPosition: { row: 2, column: 14 },
  startIndex: 42,
  endPosition: { row: 2, column: 15 },
  endIndex: 43,
  indent: "        ",
  hasChildren: false,
  children: []
}
before gutting: <program text="\n    function thing(arg1) {\n        let a = 10\n    }\n" />
    <function_declaration text="function thing(arg1) {\n        let a = 10\n    }" />
        <function text="function" />
        </function>
        <whitespace text=" " />
        <identifier text="thing" />
        </identifier>
        <formal_parameters text="(arg1)" />
            <"(" text="(" />
            </"(">
            <identifier text="arg1" />
            </identifier>
            <")" text=")" />
            </")">
        </formal_parameters>
        <whitespace text=" " />
        <statement_block text="{\n        let a = 10\n    }" />
            <"{" text="{" />
            </"{">
            <whitespace text="\n        " />
            <lexical_declaration text="let a = 10" />
                <let text="let" />
                </let>
                <whitespace text=" " />
                <variable_declarator text="a = 10" />
                    <identifier text="a" />
                    </identifier>
                    <whitespace text=" " />
                    <"=" text="=" />
                    </"=">
                    <whitespace text=" " />
                    <number text="10" />
                    </number>
                </variable_declarator>
            </lexical_declaration>
            <whitespace text="\n    " />
            <"}" text="}" />
            </"}">
        </statement_block>
    </function_declaration>
    <whitespace text="\n" />
</program>

tree.codeString is: 
    function thing(arg1) {
        let a = 10
    }

after gutting: <program text="\n    async function thing(arg1) {\n        let a += 999\n    }\n" />
    <function_declaration text="async function thing(arg1) {\n        let a += 999\n    }" />
        <function text="async function" />
        </function>
        <whitespace text=" " />
        <identifier text="thing" />
        </identifier>
        <formal_parameters text="(arg1)" />
            <"(" text="(" />
            </"(">
            <identifier text="arg1" />
            </identifier>
            <")" text=")" />
            </")">
        </formal_parameters>
        <whitespace text=" " />
        <statement_block text="{\n        let a += 999\n    }" />
            <"{" text="{" />
            </"{">
            <whitespace text="\n        " />
            <lexical_declaration text="let a += 999" />
                <let text="let" />
                </let>
                <whitespace text=" " />
                <variable_declarator text="a += 999" />
                    <identifier text="a" />
                    </identifier>
                    <whitespace text=" " />
                    <"=" text="+=" />
                    </"=">
                    <whitespace text=" " />
                    <number text="999" />
                    </number>
                </variable_declarator>
            </lexical_declaration>
            <whitespace text="\n    " />
            <"}" text="}" />
            </"}">
        </statement_block>
    </function_declaration>
    <whitespace text="\n" />
</program>

tree.codeString is: 
    async function thing(arg1) {
        let a += 999
    }

